<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Life is short,use python.]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2017-03-29T13:49:16.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[xyeshenyue]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Python算法之广度优先(BFS)和深度优先(DFS)]]></title>
    <link href="http://yoursite.com/2017/03/29/Python%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88-BFS-%E5%92%8C%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88-DFS/"/>
    <id>http://yoursite.com/2017/03/29/Python算法之广度优先-BFS-和深度优先-DFS/</id>
    <published>2017-03-29T13:16:50.000Z</published>
    <updated>2017-03-29T13:49:16.000Z</updated>
    <content type="html"><![CDATA[<p>##广度优先搜索(BFS)<br>每个顶点只访问它的邻接节点(假如这个邻接节点没有被访问)，并且将这个节点记录下来，当访问完它的邻接节点之后就结束这个顶点的访问<br>广度优先用到了”先进先出”队列，通过这个队列来存储优先发现的节点，按照顺序来进行处理.</p>
<p>处理过程如下图的二叉树<br><img src="../img/python_DFS/BFS.png" alt="img"></p>
<p>##深度优先搜索(DFS)<br>访问一个顶点以后，继续访问它的一个子节点，直到该子节点没有子节点，再接着访问当前节点的邻接节点，返回父节点，继续访问，如此往复，直到当前顶点被访问或者不存在邻接的顶点</p>
<p>吹过程如下图的二叉树<br><img src="../img/python_DFS/DFS.png" alt="img"></p>
<p>代码实现过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line"></div><div class="line">def BFS_Dir(path, dirCallback, fileCallback):</div><div class="line">    queue = []</div><div class="line">    ret = []</div><div class="line">    queue.append(path)</div><div class="line">    while len(queue) &gt; 0:</div><div class="line">        tmp = queue.pop(0)</div><div class="line">        if os.path.isdir(tmp):</div><div class="line">            ret.append(tmp)</div><div class="line">            for item in os.path.listdir(tmp):</div><div class="line">                queue.append(os.path.join(tmp, item))</div><div class="line">            if dirCallback:</div><div class="line">                dirCallback(tmp)</div><div class="line">        elif os.path.isfile(tmp):</div><div class="line">            ret.append(tmp)</div><div class="line">            if fileCallback:</div><div class="line">                fileCallback(tmp)</div><div class="line">    return ret</div><div class="line">   </div><div class="line">def DFS_Dir(path, dirCallback, fileCallback):</div><div class="line">    stack = []</div><div class="line">    ret = []</div><div class="line">    stack.append(path)</div><div class="line">    while len(stack) &gt; 0:</div><div class="line">        tmp = stack.pop(len(stack) - 1)</div><div class="line">        if os.path.isdir(tmp):</div><div class="line">            ret.append(tmp)</div><div class="line">            for item in os.path.isdir(tmp):</div><div class="line">                stack.append(os.path.join(tmp, item))</div><div class="line">            if dirCallback:</div><div class="line">                dirCallback(tmp)</div><div class="line">        elif os.path.isfile(tmp):</div><div class="line">            ret.append(tmp)</div><div class="line">            if fileCallback:</div><div class="line">                fileCallback(tmp)</div><div class="line">    return ret</div><div class="line"></div><div class="line">def printDir(path):</div><div class="line">    print(&quot;Dir: &quot;,path)</div><div class="line">    </div><div class="line">def printFile(path):</div><div class="line">    print(&quot;File: &quot;,path)</div><div class="line">    </div><div class="line">bfs = BFS_Dir(&quot;/Users/YOLO/Desktop/Hexo&quot;, printDir, printFile)</div><div class="line">dfs = DFS_Dir(&quot;/Users/YOLO/Desktop/Hexo&quot;, printDir, printFile)</div></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>##广度优先搜索(BFS)<br>每个顶点只访问它的邻接节点(假如这个邻接节点没有被访问)，并且将这个节点记录下来，当访问完它的邻接节点之后就结束这个顶点的访问<br>广度优先用到了”先进先出”队列，通过这个队列来存储优先发现的节点，按照顺序来进行处理.</p>
<p>处理]]>
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="遍历" scheme="http://yoursite.com/tags/%E9%81%8D%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python算法之各类排序算法]]></title>
    <link href="http://yoursite.com/2017/03/28/Python%E7%AE%97%E6%B3%95%E4%B9%8B%E5%90%84%E7%B1%BB%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2017/03/28/Python算法之各类排序算法/</id>
    <published>2017-03-28T09:21:48.000Z</published>
    <updated>2017-03-28T09:44:52.000Z</updated>
    <content type="html"><![CDATA[<p>本文主要是了解下用Python来实现传统的各类排序算法，主要有插入排序、希尔排序、冒泡排序、快速排序、直接选择排序、堆排序、归并排序以及基数排序。</p>
<p>##1.插入排序</p>
<p>###1.1基本思路<br>插入排序的基本操作就是讲一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2).</p>
<p>###1.2代码实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">def insert_sort(list):</div><div class="line">    count = len(list)</div><div class="line">    for i in range(1,count):</div><div class="line">        key = list[i]</div><div class="line">        j = i - 1</div><div class="line">        while j &gt;= 0:</div><div class="line">            if list[j] &gt; key:</div><div class="line">                list[j + 1], list[j] = list[j], key</div><div class="line">            j -= 1</div><div class="line">    return list</div></pre></td></tr></table></figure></p>
<p>##2.希尔排序</p>
<p>###2.1基本思路<br>希尔排序是插入排序的一种，也是缩小增量排序，直接插入排序的一种更加高效的改进版本。希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法，随着增量逐渐减少，每组包含的关键词越来越多，当增量减少至1时，整个文件恰被分成一组，算法便结束。</p>
<p>###2.2代码实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>##3.冒泡排序</p>
<p>##4.快速排序</p>
<p>##5.直接选择排序</p>
<p>##6.堆排序</p>
<p>##7.归并排序</p>
<p>##8.基数排序</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文主要是了解下用Python来实现传统的各类排序算法，主要有插入排序、希尔排序、冒泡排序、快速排序、直接选择排序、堆排序、归并排序以及基数排序。</p>
<p>##1.插入排序</p>
<p>###1.1基本思路<br>插入排序的基本操作就是讲一个数据插入到已经排好序的有]]>
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python小常识——list 赋值的区别(X+=Y)和(X=X+Y)]]></title>
    <link href="http://yoursite.com/2017/03/28/Python%E5%B0%8F%E5%B8%B8%E8%AF%86%E2%80%94%E2%80%94list-%E8%B5%8B%E5%80%BC%E7%9A%84%E5%8C%BA%E5%88%AB-X-Y-%E5%92%8C-X-X-Y/"/>
    <id>http://yoursite.com/2017/03/28/Python小常识——list-赋值的区别-X-Y-和-X-X-Y/</id>
    <published>2017-03-28T06:12:48.000Z</published>
    <updated>2017-03-28T06:53:25.000Z</updated>
    <content type="html"><![CDATA[<p>列表list是可以修改的，如果用的是+=，我们是在原来的基础上修改，如果改用var=var+···，我们就创建了一个新的list对象。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">list = []</div><div class="line">print &apos;ID:&apos;,id(list)</div><div class="line"></div><div class="line">list += [1]</div><div class="line">print &apos;ID:&apos;,id(list)</div><div class="line"></div><div class="line">list = list + [1]</div><div class="line">print &apos;ID:&apos;,id(list)</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><img src="/img/python_list/1.png" alt="img"></p>
<p>可以看到的是，前两个是同一个对象，第三个是新创建的对象<br>题外话：.append()和.extends()方法都是在原来的list基础上进行修改的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">list = []</div><div class="line">print list,&apos;nID(initial)&apos;,id(list),&apos;n&apos;</div><div class="line"></div><div class="line">list.append(1)</div><div class="line">print list,&apos;nID(append)&apos;,id(list),&apos;n&apos;</div><div class="line"></div><div class="line">list.extend([2])</div><div class="line">print list,&apos;nID(extend)&apos;,id(list),&apos;n&apos;</div></pre></td></tr></table></figure></p>
<p>结果如下：<br><img src="/img/python_list/2.png" alt="img"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>列表list是可以修改的，如果用的是+=，我们是在原来的基础上修改，如果改用var=var+···，我们就创建了一个新的list对象。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"]]>
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="小常识" scheme="http://yoursite.com/tags/%E5%B0%8F%E5%B8%B8%E8%AF%86/"/>
    
      <category term="list" scheme="http://yoursite.com/tags/list/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2017/03/23/hello-world/"/>
    <id>http://yoursite.com/2017/03/23/hello-world/</id>
    <published>2017-03-23T13:14:03.000Z</published>
    <updated>2017-03-23T13:14:04.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[HelloPython]]></title>
    <link href="http://yoursite.com/2017/03/22/HelloPython/"/>
    <id>http://yoursite.com/2017/03/22/HelloPython/</id>
    <published>2017-03-22T13:26:07.000Z</published>
    <updated>2017-03-22T13:26:07.000Z</updated>
    <content type="html"></content>
    <summary type="html">
    
    </summary>
    
  </entry>
  
</feed>
